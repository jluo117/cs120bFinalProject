
TempReader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000001bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e8  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086b  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000392  00000000  00000000  000014b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000470  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c2  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001dd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	33 d0       	rcall	.+102    	; 0x110 <main>
  aa:	4c c0       	rjmp	.+152    	; 0x144 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Request>:
#include <util/delay.h>
#define DHT11_PIN 6
uint8_t c=0,I_RH,D_RH,I_Temp,D_Temp,CheckSum;
void Request()				/* Microcontroller send start pulse/request */
{
	DDRA |= (1<<DHT11_PIN);
  ae:	0e 9a       	sbi	0x01, 6	; 1
	PORTA &= ~(1<<DHT11_PIN);	/* set to low pin */
  b0:	16 98       	cbi	0x02, 6	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	8f e3       	ldi	r24, 0x3F	; 63
  b4:	9c e9       	ldi	r25, 0x9C	; 156
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <Request+0x8>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <Request+0xe>
  bc:	00 00       	nop
	_delay_ms(20);			/* wait for 20ms */
	PORTA |= (1<<DHT11_PIN);	/* set to high pin */
  be:	16 9a       	sbi	0x02, 6	; 2
  c0:	08 95       	ret

000000c2 <Response>:
}
void Response()				/* receive response from DHT11 */
{
	DDRA &= ~(1<<DHT11_PIN);
  c2:	0e 98       	cbi	0x01, 6	; 1
	while(PINA & (1<<DHT11_PIN));
  c4:	06 99       	sbic	0x00, 6	; 0
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <Response+0x2>
	while((PINA & (1<<DHT11_PIN))==0);
  c8:	06 9b       	sbis	0x00, 6	; 0
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <Response+0x6>
	while(PINA & (1<<DHT11_PIN));
  cc:	06 99       	sbic	0x00, 6	; 0
  ce:	fe cf       	rjmp	.-4      	; 0xcc <Response+0xa>
}
  d0:	08 95       	ret

000000d2 <Receive_data>:
uint8_t Receive_data()			/* receive data */
{
  d2:	88 e0       	ldi	r24, 0x08	; 8
  d4:	90 e0       	ldi	r25, 0x00	; 0
	for (int q=0; q<8; q++)
	{
		while((PINA & (1<<DHT11_PIN)) == 0);  /* check received bit 0 or 1 */
  d6:	06 9b       	sbis	0x00, 6	; 0
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <Receive_data+0x4>
  da:	ef e5       	ldi	r30, 0x5F	; 95
  dc:	fa ee       	ldi	r31, 0xEA	; 234
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <Receive_data+0xc>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <Receive_data+0x12>
  e4:	00 00       	nop
		_delay_ms(30);
		if(PINA & (1<<DHT11_PIN))/* if high pulse is greater than 30ms */
  e6:	06 9b       	sbis	0x00, 6	; 0
  e8:	07 c0       	rjmp	.+14     	; 0xf8 <Receive_data+0x26>
		c = (c<<1)|(0x01);	/* then its logic HIGH */
  ea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  ee:	22 0f       	add	r18, r18
  f0:	21 60       	ori	r18, 0x01	; 1
  f2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
  f6:	05 c0       	rjmp	.+10     	; 0x102 <Receive_data+0x30>
		else			/* otherwise its logic LOW */
		c = (c<<1);
  f8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  fc:	22 0f       	add	r18, r18
  fe:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
		while(PINA & (1<<DHT11_PIN));
 102:	06 99       	sbic	0x00, 6	; 0
 104:	fe cf       	rjmp	.-4      	; 0x102 <Receive_data+0x30>
 106:	01 97       	sbiw	r24, 0x01	; 1
	while((PINA & (1<<DHT11_PIN))==0);
	while(PINA & (1<<DHT11_PIN));
}
uint8_t Receive_data()			/* receive data */
{
	for (int q=0; q<8; q++)
 108:	31 f7       	brne	.-52     	; 0xd6 <Receive_data+0x4>
		else			/* otherwise its logic LOW */
		c = (c<<1);
		while(PINA & (1<<DHT11_PIN));
	}
	return c;
}
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10e:	08 95       	ret

00000110 <main>:

int main(void)
{
	DDRA = 0x00;
 110:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF;
 116:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 118:	15 b8       	out	0x05, r1	; 5
    /* Replace with your application code */
    while (1) 
    {
		Request();		/* send start pulse */
 11a:	c9 df       	rcall	.-110    	; 0xae <Request>
		Response();		/* receive response */
 11c:	d2 df       	rcall	.-92     	; 0xc2 <Response>
		I_RH=Receive_data();	/* store first eight bit in I_RH */
 11e:	d9 df       	rcall	.-78     	; 0xd2 <Receive_data>
 120:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <I_RH>
		D_RH=Receive_data();	/* store next eight bit in D_RH */
 124:	d6 df       	rcall	.-84     	; 0xd2 <Receive_data>
 126:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <D_RH>
		I_Temp=Receive_data();	/* store next eight bit in I_Temp */
 12a:	d3 df       	rcall	.-90     	; 0xd2 <Receive_data>
 12c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <I_Temp>
		D_Temp=Receive_data();	/* store next eight bit in D_Temp */
 130:	d0 df       	rcall	.-96     	; 0xd2 <Receive_data>
 132:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <D_Temp>
 136:	cd df       	rcall	.-102    	; 0xd2 <Receive_data>
		CheckSum=Receive_data();/* store next eight bit in CheckSum */
 138:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <CheckSum>
 13c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I_Temp>
		PORTB = I_Temp;
 140:	85 b9       	out	0x05, r24	; 5
 142:	eb cf       	rjmp	.-42     	; 0x11a <main+0xa>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
